faradayRotation.KAIRA <- function( ACFxx , ACFyy, ACFxy , ACFyx , VARxx , VARyy, VARxy , VARyx, r , azelT=c(0,90) , llhR=radarSites()[["KIL"]] , llhT=radarSites()[["TRO"]] , azXpol=318 , azelBore=c(0,90) , h=-1)
    {
        #
        # Faraday rotation and autocovariance function estimation from
        # KAIRA cross-covariance measurements
        #
        #
        #
        #
        # I. Virtanen 2013
        #

        # stop if the ACF vectors have different lengths
        if( length( unique( c( length(ACFxx) , length(ACFyy) , length(ACFxy) , length(ACFyx) ) ) ) != 1 ) stop("ACF vectors must be of equal lengths")


        # transmitter location in EFEC coordinates
        xyzT <- LatLonH2xyz( llhT )

        # receiver location in EFEC coordinates
        xyzR <- LatLonH2xyz( llhR )

        # scattering volume location in EFEC coordinates
        xyzS <- LatLonH2xyz( range2llh(  r=r , llhT=llhT , azelT=azelT , llhR=llhR  ) )

        # unit vector pointing from the scatterer to the receiver
        xyzSR <- xyzR - xyzS
        xyzSR <- xyzSR / sqrt(sum(xyzSR**2))

        # unit vector pointing from the scatterer to the transmitter
        xyzST <- xyzT - xyzS
        xyzST <- xyzST / sqrt(sum(xyzST**2))

        # a right-handed cartesian coordinate system with
        # z-axis in the propagation direction of the scattered wave,
        # x-axis perpendicular to both incident and scattered waves, and
        # y-axis in the plane of both incident and scattered waves
        z <- xyzSR
        x <- radarPointings:::normalUnitVector.cartesian( z , xyzST )
        y <- radarPointings:::normalUnitVector.cartesian( z , x )

        # bore-sight direction in EFEC coordinates (zr-axis)
        zr <- ENU2EFEC.xyz( enuVec=azel2ENU( azelBore ) , xyzPos=xyzR )

        # x-polarization direction
        xp <- ENU2EFEC.xyz( enuVec=azel2ENU( c( azXpol , 0 ) ) , xyzPos=xyzR )

        # y-polarization direction (yr-axis), assuming that polarizations are orthogonal
        # with each other and the bore-sight direction
        yr <- radarPointings:::normalUnitVector.cartesian( zr , xp )

        # xr-axis
        xr <- radarPointings:::normalUnitVector.cartesian( yr , zr )


        # angles between x, y, xr, and yr vectors
        phixx <- radarPointings:::vectorAngle.cartesian( x , xr , degrees=FALSE)
        phixy <- radarPointings:::vectorAngle.cartesian( x , yr , degrees=FALSE)
        phiyx <- radarPointings:::vectorAngle.cartesian( y , xr , degrees=FALSE)
        phiyy <- radarPointings:::vectorAngle.cartesian( y , yr , degrees=FALSE)


        # angle between incident and scattered wave vectors
        beta <- radarPointings:::vectorAngle.cartesian( -xyzST , xyzSR , degrees=FALSE )

#print(c(phixx,phiyy,phixy,phiyx,beta)*180/pi)        
        # tabulate cosines of phi's
        cosxx <- abs(cos(phixx))
        cosxy <- abs(cos(phixy))
        cosyx <- abs(cos(phiyx))
        cosyy <- abs(cos(phiyy))

        
        # use only those lags from which we have all cross-correlations
        okinds <- which( !( is.na(ACFxx) & is.na(ACFyy) & is.na(ACFxy) & is.na(ACFyx) & is.na(VARxx) & is.na(VARyy) & is.na(VARxy) & is.na(VARyx) ) )

        # return only NA values if useful data was not given
        if( length(okinds)==0 ){
            acf <- rep(NA,length(ACFxx))
            rotAngle <- NA
            return(list(acf=acf,rotAngle=NA))
        }

        # number of usable data points in each ACF vector
        nlags <- length(okinds)

        # combine the ACF and variance vectors
        ACF <- c( ACFxx[okinds] , ACFyy[okinds] , ACFxy[okinds] , ACFyx[okinds] )
        VAR <- c( VARxx[okinds] , VARyy[okinds] , VARxy[okinds] , VARyx[okinds] )


        # initial values for ACF
        acfinit <- ACF[1:nlags] + ACF[(nlags+1):(2*nlags)]

        # initialize faraday rotation to zero, ACF is divided into real and imaginary parts
#        p <- c( 0 , beta , Re(acfinit) , Im(acfinit) )
        p <- c( Re(acfinit) , Im(acfinit) , sin(beta)**2 ,  0)

        p2 <-modFit( f=faradayDirectTheory , p=p , ACF=ACF , VAR=VAR , nlags=nlags ,
                    cosxx=cosxx,cosxy=cosxy,cosyx=cosyx,cosyy=cosyy,
                    h=h,
                    lower=c(rep(-Inf,nlags*2), 0 , -Inf ),
                    upper=c(rep(Inf,nlags*2), 1 , Inf),
                    control=list(maxiter=500)
                    )
#        print(resid<-sum(p2$ssr)/length(p))
#dev.set(2)
#        faradayDirectTheory(p2$par,ACF,VAR,nlags,cosxx,cosxy,cosyx,cosyy,plot=T)
#dev.set(3)
#        plot(p2)
        covar <- solve(p2$hessian)

        reslist <- list()
        reslist$ACF <- p2$par[1:nlags]+1i*p2$par[(nlags+1):(2*nlags)]
        reslist$var <- rep(0,nlags)
        for(k in seq(nlags)) reslist$var[k] <- covar[k,k] + covar[(k+nlags),(k+nlags)] + 2*covar[nlags,(k+nlags)]
        reslist$phi <- p2$par[2*nlags+2]
        reslist$varphi <- covar[(2*nlags+2),(2*nlags+2)]
        reslist$covar <- covar
        reslist$beta <- beta

        return(reslist)
    }
